{"version":3,"file":"createRoot.js","sources":["../../src/core/createRoot.ts"],"sourcesContent":["import { Application } from 'pixi.js';\nimport { createElement } from 'react';\nimport { ConcurrentRoot } from 'react-reconciler/constants.js';\nimport { ContextProvider } from '../components/Context';\nimport { isReadOnlyProperty } from '../helpers/isReadOnlyProperty';\nimport { log } from '../helpers/log';\nimport { prepareInstance } from '../helpers/prepareInstance';\nimport { reconciler } from './reconciler';\nimport { roots } from './roots';\n\nimport type { ApplicationOptions } from 'pixi.js';\nimport type { ReactNode } from 'react';\nimport type { ApplicationState } from '../typedefs/ApplicationState';\nimport type { CreateRootOptions } from '../typedefs/CreateRootOptions';\nimport type { HostConfig } from '../typedefs/HostConfig';\nimport type { InternalState } from '../typedefs/InternalState';\n\n/** Creates a new root for a Pixi React app. */\nexport function createRoot(\n    /** @description The DOM node which will serve as the root for this tree. */\n    target: HTMLElement | HTMLCanvasElement,\n\n    /** @description Options to configure the tree. */\n    options: CreateRootOptions = {},\n\n    /**\n     * @deprecated\n     * @description Callback to be fired when the application finishes initializing.\n     */\n    onInit?: (app: Application) => void,\n)\n{\n    // Check against mistaken use of createRoot\n    let root = roots.get(target);\n    let applicationState = (root?.applicationState ?? {\n        isInitialised: false,\n        isInitialising: false,\n    }) as ApplicationState;\n\n    const internalState = root?.internalState ?? {} as InternalState;\n\n    if (root)\n    {\n        log('warn', 'createRoot should only be called once!');\n    }\n    else\n    {\n        applicationState.app = new Application();\n        internalState.rootContainer = prepareInstance(applicationState.app.stage) as HostConfig['containerInstance'];\n    }\n\n    const fiber = root?.fiber ?? reconciler.createContainer(\n        internalState.rootContainer,\n        ConcurrentRoot,\n        null,\n        false,\n        null,\n        '',\n        console.error,\n        null,\n    );\n\n    if (!root)\n    {\n        let canvas: HTMLCanvasElement | undefined;\n\n        if (target instanceof HTMLCanvasElement)\n        {\n            canvas = target;\n        }\n\n        if (!canvas)\n        {\n            canvas = document.createElement('canvas');\n            target.innerHTML = '';\n            target.appendChild(canvas);\n        }\n        internalState.canvas = canvas;\n\n        const render = async (\n            children: ReactNode,\n            applicationOptions: ApplicationOptions,\n        ) =>\n        {\n            if (!applicationState.app.renderer && !applicationState.isInitialised && !applicationState.isInitialising)\n            {\n                applicationState.isInitialising = true;\n                await applicationState.app.init({\n                    ...applicationOptions,\n                    canvas,\n                });\n                applicationState.isInitialising = false;\n                applicationState.isInitialised = true;\n                applicationState = { ...applicationState };\n                (options.onInit ?? onInit)?.(applicationState.app);\n            }\n\n            Object.entries(applicationOptions).forEach(([key, value]) =>\n            {\n                const typedKey = /** @type {keyof ApplicationOptions} */ (key);\n\n                if (isReadOnlyProperty(\n                    applicationOptions as unknown as Record<string, unknown>,\n                    typedKey,\n                ))\n                {\n                    return;\n                }\n\n                // @ts-expect-error Typescript doesn't realise it, but we're already verifying that this isn't a readonly key.\n                applicationState.app[typedKey] = value;\n            });\n\n            // Update fiber and expose Pixi.js state to children\n            reconciler.updateContainer(\n                createElement(ContextProvider, { value: applicationState }, children),\n                fiber,\n                null,\n                () => undefined,\n            );\n\n            return applicationState.app;\n        };\n\n        root = {\n            applicationState,\n            fiber,\n            internalState,\n            render,\n        };\n\n        console.log('[pixi-react] createRoot', root);\n        console.log('[pixi-react] createRoot canvas', canvas);\n        roots.set(canvas, root);\n    }\n\n    console.log('[pixi-react] createRoot roots.size', roots.size)\n\n    return root;\n}\n"],"names":["roots","log","Application","prepareInstance","reconciler","ConcurrentRoot","isReadOnlyProperty","createElement","ContextProvider"],"mappings":";;;;;;;;;;;;;AAkBO,SAAS,UAEZ,CAAA,MAAA,EAGA,OAA6B,GAAA,IAM7B,MAEJ,EAAA;AAEI,EAAI,IAAA,IAAA,GAAOA,WAAM,CAAA,GAAA,CAAI,MAAM,CAAA,CAAA;AAC3B,EAAI,IAAA,gBAAA,GAAoB,MAAM,gBAAoB,IAAA;AAAA,IAC9C,aAAe,EAAA,KAAA;AAAA,IACf,cAAgB,EAAA,KAAA;AAAA,GACpB,CAAA;AAEA,EAAM,MAAA,aAAA,GAAgB,IAAM,EAAA,aAAA,IAAiB,EAAC,CAAA;AAE9C,EAAA,IAAI,IACJ,EAAA;AACI,IAAAC,OAAA,CAAI,QAAQ,wCAAwC,CAAA,CAAA;AAAA,GAGxD,MAAA;AACI,IAAiB,gBAAA,CAAA,GAAA,GAAM,IAAIC,mBAAY,EAAA,CAAA;AACvC,IAAA,aAAA,CAAc,aAAgB,GAAAC,+BAAA,CAAgB,gBAAiB,CAAA,GAAA,CAAI,KAAK,CAAA,CAAA;AAAA,GAC5E;AAEA,EAAM,MAAA,KAAA,GAAQ,IAAM,EAAA,KAAA,IAASC,qBAAW,CAAA,eAAA;AAAA,IACpC,aAAc,CAAA,aAAA;AAAA,IACdC,2BAAA;AAAA,IACA,IAAA;AAAA,IACA,KAAA;AAAA,IACA,IAAA;AAAA,IACA,EAAA;AAAA,IACA,OAAQ,CAAA,KAAA;AAAA,IACR,IAAA;AAAA,GACJ,CAAA;AAEA,EAAA,IAAI,CAAC,IACL,EAAA;AACI,IAAI,IAAA,MAAA,CAAA;AAEJ,IAAA,IAAI,kBAAkB,iBACtB,EAAA;AACI,MAAS,MAAA,GAAA,MAAA,CAAA;AAAA,KACb;AAEA,IAAA,IAAI,CAAC,MACL,EAAA;AACI,MAAS,MAAA,GAAA,QAAA,CAAS,cAAc,QAAQ,CAAA,CAAA;AACxC,MAAA,MAAA,CAAO,SAAY,GAAA,EAAA,CAAA;AACnB,MAAA,MAAA,CAAO,YAAY,MAAM,CAAA,CAAA;AAAA,KAC7B;AACA,IAAA,aAAA,CAAc,MAAS,GAAA,MAAA,CAAA;AAEvB,IAAM,MAAA,MAAA,GAAS,OACX,QAAA,EACA,kBAEJ,KAAA;AACI,MAAI,IAAA,CAAC,iBAAiB,GAAI,CAAA,QAAA,IAAY,CAAC,gBAAiB,CAAA,aAAA,IAAiB,CAAC,gBAAA,CAAiB,cAC3F,EAAA;AACI,QAAA,gBAAA,CAAiB,cAAiB,GAAA,IAAA,CAAA;AAClC,QAAM,MAAA,gBAAA,CAAiB,IAAI,IAAK,CAAA;AAAA,UAC5B,GAAG,kBAAA;AAAA,UACH,MAAA;AAAA,SACH,CAAA,CAAA;AACD,QAAA,gBAAA,CAAiB,cAAiB,GAAA,KAAA,CAAA;AAClC,QAAA,gBAAA,CAAiB,aAAgB,GAAA,IAAA,CAAA;AACjC,QAAmB,gBAAA,GAAA,EAAE,GAAG,gBAAiB,EAAA,CAAA;AACzC,QAAA,CAAC,OAAQ,CAAA,MAAA,IAAU,MAAU,IAAA,gBAAA,CAAiB,GAAG,CAAA,CAAA;AAAA,OACrD;AAEA,MAAO,MAAA,CAAA,OAAA,CAAQ,kBAAkB,CAAE,CAAA,OAAA,CAAQ,CAAC,CAAC,GAAA,EAAK,KAAK,CACvD,KAAA;AACI,QAAM,MAAA,QAAA;AAAA;AAAA,UAAoD,GAAA;AAAA,SAAA,CAAA;AAE1D,QAAI,IAAAC,qCAAA;AAAA,UACA,kBAAA;AAAA,UACA,QAAA;AAAA,SAEJ,EAAA;AACI,UAAA,OAAA;AAAA,SACJ;AAGA,QAAiB,gBAAA,CAAA,GAAA,CAAI,QAAQ,CAAI,GAAA,KAAA,CAAA;AAAA,OACpC,CAAA,CAAA;AAGD,MAAWF,qBAAA,CAAA,eAAA;AAAA,QACPG,oBAAcC,uBAAiB,EAAA,EAAE,KAAO,EAAA,gBAAA,IAAoB,QAAQ,CAAA;AAAA,QACpE,KAAA;AAAA,QACA,IAAA;AAAA,QACA,MAAM,KAAA,CAAA;AAAA,OACV,CAAA;AAEA,MAAA,OAAO,gBAAiB,CAAA,GAAA,CAAA;AAAA,KAC5B,CAAA;AAEA,IAAO,IAAA,GAAA;AAAA,MACH,gBAAA;AAAA,MACA,KAAA;AAAA,MACA,aAAA;AAAA,MACA,MAAA;AAAA,KACJ,CAAA;AAEA,IAAQ,OAAA,CAAA,GAAA,CAAI,2BAA2B,IAAI,CAAA,CAAA;AAC3C,IAAQ,OAAA,CAAA,GAAA,CAAI,kCAAkC,MAAM,CAAA,CAAA;AACpD,IAAMR,WAAA,CAAA,GAAA,CAAI,QAAQ,IAAI,CAAA,CAAA;AAAA,GAC1B;AAEA,EAAQ,OAAA,CAAA,GAAA,CAAI,oCAAsC,EAAAA,WAAA,CAAM,IAAI,CAAA,CAAA;AAE5D,EAAO,OAAA,IAAA,CAAA;AACX;;;;"}