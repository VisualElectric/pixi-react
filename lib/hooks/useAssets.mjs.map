{"version":3,"file":"useAssets.mjs","sources":["../../src/hooks/useAssets.ts"],"sourcesContent":["import {\n    Assets,\n    Cache,\n} from 'pixi.js';\nimport { useState } from 'react';\nimport { UseAssetsStatus } from '../constants/UseAssetsStatus';\nimport { getAssetKey } from '../helpers/getAssetKey';\n\nimport type { AssetRetryState } from '../typedefs/AssetRetryState';\nimport type { UnresolvedAsset } from '../typedefs/UnresolvedAsset';\nimport type { UseAssetsOptions } from '../typedefs/UseAssetsOptions';\nimport type { UseAssetsResult } from '../typedefs/UseAssetsResult';\n\nconst errorCache: Map<UnresolvedAsset, AssetRetryState> = new Map();\n\nfunction assetsLoadedTest<T>(asset: UnresolvedAsset<T>)\n{\n    return Cache.has(getAssetKey(asset));\n}\n\n/** Loads assets, returning a hash of assets once they're loaded. */\nexport function useAssets<T = any>(\n    /** @description Assets to be loaded. */\n    assets: UnresolvedAsset[],\n\n    /** @description Asset options. */\n    options: UseAssetsOptions = {},\n): UseAssetsResult<T>\n{\n    const [state, setState] = useState<UseAssetsResult<T>>({\n        assets: Array(assets.length).fill(undefined),\n        isError: false,\n        isPending: true,\n        isSuccess: false,\n        status: UseAssetsStatus.PENDING,\n    });\n\n    if (typeof window === 'undefined')\n    {\n        return state;\n    }\n\n    const {\n        maxRetries = 3,\n        onError,\n        onProgress,\n        retryOnFailure = true,\n    } = options;\n\n    const allAssetsAreLoaded = assets.some(assetsLoadedTest<T>);\n\n    if (!allAssetsAreLoaded)\n    {\n        let cachedState = errorCache.get(assets);\n\n        // Rethrow the cached error if we are not retrying on failure or have reached the max retries\n        if (cachedState && (!retryOnFailure || cachedState.retries > maxRetries))\n        {\n            if (typeof onError === 'function')\n            {\n                onError(cachedState.error);\n            }\n\n            setState((previousState) => ({\n                ...previousState,\n                error: cachedState?.error,\n                isError: true,\n                isPending: false,\n                isSuccess: false,\n                status: UseAssetsStatus.ERROR,\n            }));\n        }\n\n        Assets.load<T>(assets, (progressValue) =>\n        {\n            if (typeof onProgress === 'function')\n            {\n                onProgress(progressValue);\n            }\n        })\n            .then(() =>\n            {\n                const assetKeys = assets.map((asset: UnresolvedAsset<T>) => getAssetKey(asset));\n                const resolvedAssetsDictionary = Assets.get<T>(assetKeys) as Record<string, T>;\n\n                setState((previousState) => ({\n                    ...previousState,\n                    assets: assets.map((_asset: UnresolvedAsset<T>, index: number) => resolvedAssetsDictionary[index]),\n                    isError: false,\n                    isPending: false,\n                    isSuccess: true,\n                    status: UseAssetsStatus.SUCCESS,\n                }));\n            })\n            .catch((error) =>\n            {\n                if (!cachedState)\n                {\n                    cachedState = {\n                        error,\n                        retries: 0,\n                    };\n                }\n\n                errorCache.set(assets, {\n                    ...cachedState,\n                    error,\n                    retries: cachedState.retries + 1,\n                });\n            });\n    }\n\n    return state;\n}\n"],"names":[],"mappings":"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"}